import { AxiosError } from "axios";
import { AsyncRemoteData, RemoteData } from "./remote-data";
declare type HTTPMethod = "get" | "post" | "put" | "patch" | "delete";
export declare type WebData<T> = RemoteData<AxiosError, T>;
export declare type AsyncWebData<T> = AsyncRemoteData<AxiosError, T>;
export declare const request: (method: HTTPMethod) => <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const get: <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const post: <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const patch: <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const put: <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const del: <T, D = undefined>(url: string, data?: D | undefined) => Promise<RemoteData<AxiosError<any>, T>>;
export declare const useRemoteData: <T>(requestF: () => Promise<RemoteData<AxiosError<any>, T>>) => [RemoteData<AxiosError<any>, T>, () => void];
export {};
